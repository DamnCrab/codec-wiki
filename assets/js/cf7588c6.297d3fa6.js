"use strict";(self.webpackChunkcodec_wiki=self.webpackChunkcodec_wiki||[]).push([[5971],{9520:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var n=s(4848),i=s(8453);const r={title:"x264",sidebar_position:1},l="x264",d={id:"encoders/x264",title:"x264",description:"x264 is a software library and command line application for encoding H.264 / AVC developed by VideoLAN, the people behind the ever-popular VLC Media Player and released under GNU GPL. It is written in C and Assembly with almost two decades worth of development and threading optimizations which makes it the fastest software video encoder available, which also happens to be extremely popular.",source:"@site/docs/encoders/x264.mdx",sourceDirName:"encoders",slug:"/encoders/x264",permalink:"/docs/encoders/x264",draft:!1,unlisted:!1,editUrl:"https://github.com/av1-community-contributors/codec-wiki/tree/main/docs/encoders/x264.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"x264",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"QOI",permalink:"/docs/images/QOI"},next:{title:"x265",permalink:"/docs/encoders/x265"}},o={},c=[{value:"FFmpeg",id:"ffmpeg",level:2},{value:"Supported Color Space",id:"supported-color-space",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Recommendations",id:"recommendations",level:2},{value:"Preset",id:"preset",level:3},{value:"Threads",id:"threads",level:3},{value:"Open GOP",id:"open-gop",level:3},{value:"AQ Mode",id:"aq-mode",level:3},{value:"Reference Frames",id:"reference-frames",level:3},{value:"MB Tree",id:"mb-tree",level:3},{value:"Lossless Encoding",id:"lossless-encoding",level:3}];function a(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"x264",children:"x264"}),"\n",(0,n.jsx)(t.p,{children:"x264 is a software library and command line application for encoding H.264 / AVC developed by VideoLAN, the people behind the ever-popular VLC Media Player and released under GNU GPL. It is written in C and Assembly with almost two decades worth of development and threading optimizations which makes it the fastest software video encoder available, which also happens to be extremely popular."}),"\n",(0,n.jsx)(t.p,{children:"x264 has great fine detail retention which makes it perfect for high fidelity content."}),"\n",(0,n.jsx)(t.h2,{id:"ffmpeg",children:"FFmpeg"}),"\n",(0,n.jsxs)(t.p,{children:["x264 is available in FFmpeg via ",(0,n.jsx)(t.code,{children:"libx264"}),", to check if you have it, run ",(0,n.jsx)(t.code,{children:"ffmpeg -h encoder=libx264"}),". You can input non-FFmpeg standard x264 parameters via ",(0,n.jsx)(t.code,{children:"-x264-params"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"supported-color-space",children:"Supported Color Space"}),"\n",(0,n.jsx)(t.p,{children:"x264 supports the following color spaces:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Format"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Chroma Subsampling"}),(0,n.jsx)(t.th,{children:"Supported Bit Depth(s)"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"YUV420P"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"4:2:0"}),(0,n.jsx)(t.td,{children:"8-bit"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"YUVJ420P"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"4:2:0"}),(0,n.jsx)(t.td,{children:"8-bit (Full range)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"YUV422P"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"4:2:2"}),(0,n.jsx)(t.td,{children:"8-bit"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"YUVJ422P"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"4:2:2"}),(0,n.jsx)(t.td,{children:"8-bit (Full range)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"YUV444P"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"4:4:4"}),(0,n.jsx)(t.td,{children:"8-bit"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"YUVJ444P"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"4:4:4"}),(0,n.jsx)(t.td,{children:"8-bit (Full range)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"NV12"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Semi-planar"}),(0,n.jsx)(t.td,{children:"8-bit"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"NV16"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Semi-planar"}),(0,n.jsx)(t.td,{children:"8-bit"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"NV21"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Semi-planar"}),(0,n.jsx)(t.td,{children:"8-bit (reversed)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"GRAY8"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"-"}),(0,n.jsx)(t.td,{children:"8-bit"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"YUV420P10LE"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"4:2:0"}),(0,n.jsx)(t.td,{children:"10-bit"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"YUV422P10LE"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"4:2:2"}),(0,n.jsx)(t.td,{children:"10-bit"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"YUV444P10LE"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"4:4:4"}),(0,n.jsx)(t.td,{children:"10-bit"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"GBRP10LE"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"-"}),(0,n.jsx)(t.td,{children:"10-bit"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"GRAY10LE"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"-"}),(0,n.jsx)(t.td,{children:"10-bit"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Pre-built binary [Recommended]:"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://code.videolan.org/videolan/x264",children:"https://code.videolan.org/videolan/x264"})}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Choose your operating system there, or you can try using your package manager."}),"\n",(0,n.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(t.p,{children:"x264 has been praised for its simple, no-fuss settings."}),"\n",(0,n.jsx)(t.p,{children:"Here are some examples:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",metastring:'title="Simple raw Y4M input with CRF 20 and raw 264 bitstream output"',children:"x264 --crf 20 -o output.264 input.y4m\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",metastring:'title="Preset slow, CRF 20, Y4M input"',children:"x264 --preset slow --crf 20 -o output.264 input.y4m\n"})}),"\n",(0,n.jsxs)(t.p,{children:["These next couple of examples utilize ",(0,n.jsx)(t.a,{href:"/docs/utilities/ffmpeg",children:"FFmpeg"})," to pipe video into x264."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",metastring:'title="FFmpeg piping"',children:"ffmpeg -v error -i input.mkv -f yuv4mpegpipe -strict -1 - | x264 --preset slow --crf 20 --demux y4m - -o output.264\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",metastring:'title="FFmpeg piping, MKV output"',children:"ffmpeg -v error -i input.mkv -f yuv4mpegpipe -strict -1 - | x264 --preset slow --crf 20 --demux y4m - -o output.mkv\n"})}),"\n",(0,n.jsx)(t.admonition,{title:"Output Containers",type:"note",children:(0,n.jsxs)(t.p,{children:["x264 can output ",(0,n.jsx)(t.code,{children:"264"}),", MKV, FLV (Flash Video), and MP4 (If compiled with GPAC or L-SMASH support). For more information about what containers are, see the ",(0,n.jsx)(t.a,{href:"/docs/introduction/terminology#container",children:'"Terminology" section on containers'}),"."]})}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsx)(t.p,{children:"x264 will use Haali Matroska Muxer for MKV outputs, which has seeking issues. It is recommended to remux back using FFmpeg or mkvmerge/MKVToolNix."})}),"\n",(0,n.jsx)(t.h2,{id:"recommendations",children:"Recommendations"}),"\n",(0,n.jsx)(t.p,{children:'As x264 is made to "just work", there aren\'t many advanced parameters to modify. The general guideline is to encode as slowly as you can tolerate.'}),"\n",(0,n.jsx)(t.h3,{id:"preset",children:"Preset"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"--preset veryslow"})}),"\n",(0,n.jsxs)(t.p,{children:["The most obvious way to increase fidelity per bit is to allow the encoder to spend more effort, and therefore time, encoding. This preset is decently slow, but preset ",(0,n.jsx)(t.code,{children:"placebo"})," is even slower."]}),"\n",(0,n.jsx)(t.h3,{id:"threads",children:"Threads"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"--threads X"})}),"\n",(0,n.jsx)(t.p,{children:"It is recommended to increase this value to your CPU's thread count. In most cases, x264 should be able to completely saturate most consumer CPUs."}),"\n",(0,n.jsx)(t.h3,{id:"open-gop",children:"Open GOP"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"--open-gop"})}),"\n",(0,n.jsxs)(t.p,{children:["Enables Open GOP (Group of Pictures), where each GOP can ",(0,n.jsx)(t.a,{href:"https://ottverse.com/closed-gop-open-gop-idr/",children:"reference one another"}),", thus improving compression with little speed loss. For unknown reasons it is disabled by default in x264."]}),"\n",(0,n.jsx)(t.h3,{id:"aq-mode",children:"AQ Mode"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"--aq-mode 3"})}),"\n",(0,n.jsx)(t.p,{children:"In short, will make x264 bias to dark areas and spend more bitrate there, thus dark scenes will look less bad. Basically no speed loss."}),"\n",(0,n.jsx)(t.h3,{id:"reference-frames",children:"Reference Frames"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"--bframes 8 --ref 12"})}),"\n",(0,n.jsx)(t.p,{children:"These parameters are responsible for the amount of reference frames x264 will use for compression, the more the better. Maximum of 16, will definitely increase compute time the higher you go."}),"\n",(0,n.jsx)(t.h3,{id:"mb-tree",children:"MB Tree"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"--no-mbtree"})}),"\n",(0,n.jsxs)(t.p,{children:["This option disables mb-tree rate control. Many claim that mb-tree rate control only assists in x264's ability to score well on metrics like ",(0,n.jsx)(t.a,{href:"/docs/metrics/PSNR",children:"PSNR"}),", and may harm visual quality."]}),"\n",(0,n.jsx)(t.h3,{id:"lossless-encoding",children:"Lossless Encoding"}),"\n",(0,n.jsxs)(t.p,{children:["x264 can also encode lossless video, allowing it to compete with lossless video codecs like ",(0,n.jsx)(t.a,{href:"/docs/video/FFV1",children:"FFV1"})," and ",(0,n.jsx)(t.a,{href:"/docs/video/utvideo",children:"UT Video"}),". To encode lossless video, use ",(0,n.jsx)(t.code,{children:"--qp 0"}),". Slower presets will decrease the size even further while the video remains lossless."]}),"\n",(0,n.jsxs)(t.p,{children:["Keep in mind that lossless H.264 can be very difficult to decode if you do not use the ",(0,n.jsx)(t.code,{children:"ultrafast"})," preset, so it may be worth passing the ",(0,n.jsx)(t.code,{children:"--tune fastdecode"})," parameter to ensure faster decoding."]}),"\n",(0,n.jsx)(t.admonition,{title:"Why QP 0 instead of CRF 0?",type:"info",children:(0,n.jsxs)(t.p,{children:["CRF automatically adjusts a number of quantization parameters to achieve a desired quality output. QP stands for ",(0,n.jsx)(t.em,{children:"Quantization Parameter"}),", and allows full control over the resulting video quality. In this case, all-intra or lossless, using QP is necesasry, but for lossy encoding CRF will produce better visual fidelity per bit."]})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>d});var n=s(6540);const i={},r=n.createContext(i);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);