"use strict";(self.webpackChunkav_1_wiki=self.webpackChunkav_1_wiki||[]).push([[3146],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>v});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,v=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(v,l(l({ref:t},s),{},{components:n})):a.createElement(v,l({ref:t},s))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8508:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={label:"rav1e",order:196,date:new Date("2023-05-09T00:00:00.000Z")},l="rav1e",o={unversionedId:"encoders/rav1e",id:"encoders/rav1e",title:"rav1e",description:"rav1e is a command line application for encoding AV1 written in Rust and Assembly joint-developed by Xiph.org and Mozilla.",source:"@site/docs/encoders/rav1e.md",sourceDirName:"encoders",slug:"/encoders/rav1e",permalink:"/av1-wiki.github.io/docs/encoders/rav1e",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/encoders/rav1e.md",tags:[],version:"current",frontMatter:{label:"rav1e",order:196,date:"2023-05-09T00:00:00.000Z"},sidebar:"tutorialSidebar",previous:{title:"aomenc",permalink:"/av1-wiki.github.io/docs/encoders/aomenc"},next:{title:"uvg266",permalink:"/av1-wiki.github.io/docs/encoders/uvg266"}},p={},u=[{value:"FFmpeg",id:"ffmpeg",level:2},{value:"Installation",id:"installation",level:2},{value:"Installation with HDR10+ support",id:"installation-with-hdr10-support",level:2},{value:"Usage",id:"usage",level:2},{value:"Tips and tricks",id:"tips-and-tricks",level:2}],s={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rav1e"},"rav1e"),(0,r.kt)("p",null,"rav1e is a command line application for encoding AV1 written in Rust and Assembly joint-developed by Xiph.org and Mozilla."),(0,r.kt)("h2",{id:"ffmpeg"},"FFmpeg"),(0,r.kt)("p",null,"rav1e is available in FFmpeg via ",(0,r.kt)("inlineCode",{parentName:"p"},"librav1e"),", check if you have it by running ",(0,r.kt)("inlineCode",{parentName:"p"},"ffmpeg -h encoder=librav1e")," which would display the following output (As of 2023-05-09):\n=== CLI output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Encoder librav1e [librav1e AV1]:\n    General capabilities: dr1 delay threads \n    Threading capabilities: other\n    Supported pixel formats: yuv420p yuvj420p yuv420p10le yuv420p12le yuv422p yuvj422p yuv422p10le yuv422p12le yuv444p yuvj444p yuv444p10le yuv444p12le\nlibrav1e AVOptions:\n  -qp                <int>        E..V....... use constant quantizer mode (from -1 to 255) (default -1)\n  -speed             <int>        E..V....... what speed preset to use (from -1 to 10) (default -1)\n  -tiles             <int>        E..V....... number of tiles encode with (from -1 to I64_MAX) (default 0)\n  -tile-rows         <int>        E..V....... number of tiles rows to encode with (from -1 to I64_MAX) (default 0)\n  -tile-columns      <int>        E..V....... number of tiles columns to encode with (from -1 to I64_MAX) (default 0)\n  -rav1e-params      <dictionary> E..V....... set the rav1e configuration using a :-separated list of key=value parameters\n")),(0,r.kt)("p",null,"==="),(0,r.kt)("p",null,"You can input non-FFmpeg standard rav1e parameters via ",(0,r.kt)("inlineCode",{parentName:"p"},"-rav1e-params"),". Please keep in mind that unless you built FFmpeg yourself, you are using the most vanilla version of rav1e."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pre-built binary ","[Recommended]",":")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/xiph/rav1e/releases"},"https://github.com/xiph/rav1e/releases"))),(0,r.kt)("p",null,"!!! warning\nCompilation requires NASM\n!!!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Compiling, via cargo:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cargo install rav1e"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Compiling, manually (Linux/MacOS):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/xiph/rav1e.git\ncd rav1e\nRUSTFLAGS="-C target-cpu=native" cargo build --release\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Compiling, manually (Windows):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/xiph/rav1e.git\ncd rav1e\nset RUSTFLAGS=-C target-cpu=native\ncargo build --release\n")),(0,r.kt)("p",null,"When done, the binary can be found in ",(0,r.kt)("inlineCode",{parentName:"p"},"target/release")),(0,r.kt)("h2",{id:"installation-with-hdr10-support"},"Installation with HDR10+ support"),(0,r.kt)("p",null,"rav1e currently have an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/xiph/rav1e/pull/3000"},"unmerged pull request")," none other by quietvoid, the person behind ",(0,r.kt)("inlineCode",{parentName:"p"},"hdr10plus_tool")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"dovi_tool"),". The PR adds a new parameter called ",(0,r.kt)("inlineCode",{parentName:"p"},"--hdr10plus-json")," for HDR10+ JSON dynamic metadata input, to merge it locally do the following"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/xiph/rav1e.git\ncd rav1e\ngit fetch origin pull/3000/head:HDR10+\n")),(0,r.kt)("p",null,"now the patch should be applied, build as usual"),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,'rav1e is made to "Just work", so you don\'t have to fiddle around with cargo cult settings, here are some examples'),(0,r.kt)("p",null,"Basic usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rav1e -i input.y4m -o output.ivf --quantizer 60 --photon-noise 8\n")),(0,r.kt)("p",null,"Basic usage with FFmpeg piping, 10bit input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ffmpeg -i input.mkv -pix_fmt yuv420p10le -strict -2 -f yuv4mpegpipe - | rav1e - -o output.ivf --quantizer 80 --photon-noise 8\n")),(0,r.kt)("p",null,"Basic usage with FFmpeg piping, 10bit input and assuming 4K:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ffmpeg -i input.mkv -pix_fmt yuv420p10le -strict -2 -f yuv4mpegpipe - | rav1e - -o output.ivf --quantizer 68 --tile-columns 2 --tile-rows 1 --photon-noise 8\n")),(0,r.kt)("h2",{id:"tips-and-tricks"},"Tips and tricks"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"})))}d.isMDXComponent=!0}}]);