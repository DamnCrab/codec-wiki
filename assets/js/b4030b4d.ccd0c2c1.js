"use strict";(self.webpackChunkcodec_wiki=self.webpackChunkcodec_wiki||[]).push([[6766],{7606:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>n,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var o=t(5893),a=t(1151);const s={label:"Aviator",sidebar_position:1},n="Aviator",r={id:"utilities/Aviator",title:"Aviator",description:"Aviator is a GUI application designed for encoding AV1 video & Opus audio with SVT-AV1, libopus, & ffmpeg on Linux systems in a user-friendly, intuitive manner. Aviator's primary focus is ease-of-use, while still striving to offer optimal quality per bit through smart defaults implemented via its SVT-AV1 encoder.",source:"@site/docs/utilities/Aviator.mdx",sourceDirName:"utilities",slug:"/utilities/Aviator",permalink:"/docs/utilities/Aviator",draft:!1,unlisted:!1,editUrl:"https://github.com/av1-community-contributors/codec-wiki/tree/main/docs/utilities/Aviator.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{label:"Aviator",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Dehalo",permalink:"/docs/filtering/dehalo"},next:{title:"Av1an",permalink:"/docs/utilities/av1an"}},l={},d=[{value:"Installation",id:"installation",level:2},{value:"Aviator&#39;s Defaults",id:"aviators-defaults",level:2},{value:"Perceptual Optimization",id:"perceptual-optimization",level:3},{value:"Video",id:"video",level:3},{value:"Audio",id:"audio",level:3},{value:"Output",id:"output",level:3},{value:"Credits",id:"credits",level:2}];function u(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h1,{id:"aviator",children:"Aviator"}),"\n",(0,o.jsxs)(i.p,{children:["Aviator is a GUI application designed for encoding ",(0,o.jsx)(i.a,{href:"/docs/video/AV1",children:"AV1"})," video & Opus audio with ",(0,o.jsx)(i.a,{href:"/docs/encoders/SVT-AV1",children:"SVT-AV1"}),", ",(0,o.jsx)(i.a,{href:"/docs/audio/Opus",children:"libopus"}),", & ",(0,o.jsx)(i.a,{href:"/docs/utilities/ffmpeg",children:"ffmpeg"})," on Linux systems in a user-friendly, intuitive manner. Aviator's primary focus is ease-of-use, while still striving to offer optimal quality per bit through smart defaults implemented via its SVT-AV1 encoder."]}),"\n",(0,o.jsx)("img",{width:"640",height:"360",src:"https://raw.githubusercontent.com/gianni-rosato/aviator/main/assets/aviator_splash2.avif",alt:"Aviator Splash"}),"\n",(0,o.jsx)(i.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(i.p,{children:["Aviator is available on Flathub as a Flatpak. You can learn how to set up Flatpak on your distro of choice ",(0,o.jsx)(i.a,{href:"https://flatpak.org/setup/",children:"here"}),"."]}),"\n",(0,o.jsx)("a",{href:"https://flathub.org/apps/details/net.natesales.Aviator",children:(0,o.jsx)("img",{width:"200",alt:"Download on Flathub",src:"https://flathub.org/assets/badges/flathub-badge-en.png"})}),"\n",(0,o.jsx)(i.p,{children:"Aviator's rationale behind using Flatpak is to ship its own dependencies & ensure users across every distro have a cohesive experience with the latest up-to-date SVT-AV1 implementation that is best for visual quality."}),"\n",(0,o.jsx)(i.h2,{id:"aviators-defaults",children:"Aviator's Defaults"}),"\n",(0,o.jsx)(i.p,{children:"Hovering over most user configurable options in Aviator will produce a helpful tooltip that you can look at to make things more clear."}),"\n",(0,o.jsx)(i.h3,{id:"perceptual-optimization",children:"Perceptual Optimization"}),"\n",(0,o.jsxs)(i.p,{children:["Aviator doesn't use mainline SVT-AV1, but rather uses ",(0,o.jsx)(i.a,{href:"https://github.com/BlueSwordM/SVT-AV1",children:"a fork"})," maintained for perceptual quality. It includes several unique changes, including a custom ",(0,o.jsx)(i.a,{href:"/docs/metrics/SSIM",children:"SSIM"})," ",(0,o.jsx)(i.a,{href:"/docs/introduction/psychovisual",children:"RDO"})," tune that isn't included in mainline SVT-AV1."]}),"\n",(0,o.jsx)(i.p,{children:"Aviator's default FFmpeg command uses the following SVT-AV1 parameters:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"-c:v libsvtav1 -crf X -preset X -pix_fmt yuv420p10le -svtav1-params film-grain=X:input-depth=10:tune=2:enable-qm=1:scd=1:enable-overlays=1:film-grain-denoise=X\n"})}),"\n",(0,o.jsx)(i.h3,{id:"video",children:"Video"}),"\n",(0,o.jsx)("img",{width:"678",height:"567",src:"https://raw.githubusercontent.com/gianni-rosato/aviator/main/assets/aviator_video.webp",alt:"Aviator Video Settings",loading:"lazy"}),"\n",(0,o.jsxs)(i.p,{children:["By default, output resolution will match your source's resolution. Manually changing one resolution value will automatically calculate the other based on the video's aspect ratio. Aviator's SVT-AV1 speed preset is set to 6 by default, with a CRF (Constant Rate Factor) level of 32. You can set CRF from 0 to 63 using the slider, with larger numerical values indicating smaller filesize at the expense of visual quality. You can look at the detailed specifications behind each speed preset ",(0,o.jsx)(i.a,{href:"https://gitlab.com/AOMediaCodec/SVT-AV1/-/blob/master/Docs/CommonQuestions.mdx#what-presets-do",children:"here"}),". Speed 6 offers a good balance between speed & compression efficiency at any CRF level."]}),"\n",(0,o.jsx)(i.p,{children:"Setting values that don't correspond with the source video's aspect ratio means the output will either stretch or crop based on if the \"crop\" option is checked."}),"\n",(0,o.jsx)(i.p,{children:"The Grain Synth slider allows you to add artificial grain to your video to mimic its natural grain. This option applies the artificial grain at decode time as a filter, which makes it easier to encode grainy videos at high fidelity. The Denoise switch removes noise from the video before applying artificial grain."}),"\n",(0,o.jsx)(i.h3,{id:"audio",children:"Audio"}),"\n",(0,o.jsx)("img",{width:"678",height:"567",src:"https://raw.githubusercontent.com/gianni-rosato/aviator/main/assets/aviator_audio.webp",alt:"Aviator Audio Settings",loading:"lazy"}),"\n",(0,o.jsx)(i.p,{children:"The default bitrate for Opus audio is 48kb/s. The audio source can be copied to the output media via that \"Copy Audio\" switch, & audio with >2 channels can be downmixed to stereo via the appropriately labelled switch. Volume adjustment & normalization are also offered in this section as well; the Volume slider allows you to increase or decrease the output's volume & is measured in decibels, & negative values decrease the volume. The Normalize toggle allows you to normalize your audio's perceived loudness."}),"\n",(0,o.jsx)(i.p,{children:'The "Copy Audio" switch disables WebM output due to potential compatibility hiccups & overrides every option on the Audio page to keep the source audio untouched. This option, when enabled, ensures the source audio isn\'t reencoded.'}),"\n",(0,o.jsx)(i.p,{children:"The Volume slider allows you to increase or decrease the output's volume. It is measured in decibels, and negative values decrease the volume. The Normalize switch allows you to normalize the audio's perceived loudness."}),"\n",(0,o.jsx)(i.h3,{id:"output",children:"Output"}),"\n",(0,o.jsx)("img",{width:"678",height:"567",src:"https://raw.githubusercontent.com/gianni-rosato/aviator/main/assets/aviator_output.webp",alt:"Aviator Output UI",loading:"lazy"}),"\n",(0,o.jsxs)(i.p,{children:["The container your video is stored in is associated with the file extension. Aviator offers two options for video output: the ",(0,o.jsx)(i.a,{href:"/docs/introduction/terminology#mkv--mka--mks--mk3d",children:"Matroska"})," video container & the ",(0,o.jsx)(i.a,{href:"/docs/introduction/terminology#webm",children:"WebM"})," container. The open-source Matroska container (.MKV) is used by default in Aviator & is a universal multimedia container with broad video & audio support. WebM is designed for web compatibility. Aviator won't copy subtitles to WebM outputs because WebM is only officially compatible with ",(0,o.jsx)(i.a,{href:"/docs/subtitles/webvtt",children:"WebVTT"})," subtitles. Both containers work out of the box with Aviator's AV1 video & Opus audio, but WebM output will be disabled if the Copy Audio switch is enabled because then we lose this format compliance assurance."]}),"\n",(0,o.jsx)(i.h2,{id:"credits",children:"Credits"}),"\n",(0,o.jsxs)(i.p,{children:["Actively developed by ",(0,o.jsx)(i.a,{href:"https://github.com/gianni-rosato/",children:"Gianni Rosato"}),"."]})]})}function c(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},1151:(e,i,t)=>{t.d(i,{Z:()=>r,a:()=>n});var o=t(7294);const a={},s=o.createContext(a);function n(e){const i=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:n(e.components),o.createElement(s.Provider,{value:i},e.children)}}}]);