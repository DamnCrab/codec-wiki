"use strict";(self.webpackChunkav1_wiki=self.webpackChunkav1_wiki||[]).push([[615],{3905:(e,t,i)=>{i.d(t,{Zo:()=>m,kt:()=>u});var a=i(7294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function n(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?n(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,a,o=function(e,t){if(null==e)return{};var i,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)i=n[a],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)i=n[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var i=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),c=p(i),g=o,u=c["".concat(l,".").concat(g)]||c[g]||h[g]||n;return i?a.createElement(u,s(s({ref:t},m),{},{components:i})):a.createElement(u,s({ref:t},m))}));function u(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=i.length,s=new Array(n);s[0]=g;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[c]="string"==typeof e?e:o,s[1]=r;for(var p=2;p<n;p++)s[p]=i[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,i)}g.displayName="MDXCreateElement"},2403:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>n,metadata:()=>r,toc:()=>p});var a=i(7462),o=(i(7294),i(3905));const n={label:"Site Optimization",sidebar_position:7},s="Site Optimization",r={unversionedId:"images/site-optimization",id:"images/site-optimization",title:"Site Optimization",description:"A big part of understanding any multimedia codec technology is knowing the application for such technology. For images, a big use case is web delivery. Compared to other multimedia, images are incredibly popular on the Web & knowing how to serve them properly can be a massive boon to your website's traffic as well as less of a headache for users on slower connections or who are under bandwidth constraints. The most disappointing part is that images are often poorly done on the web; all too frequently will you run into a site serving massive photographic PNGs for no reason, or photography sites serving photographs fresh out of the editing software with no thought put into their final delivery. A little effort, patience, & knowledge will go a long way toward improving the user experience for individuals using your site, & this article will illustrate some of the basics.",source:"@site/docs/images/site-optimization.md",sourceDirName:"images",slug:"/images/site-optimization",permalink:"/av1-wiki.github.io/docs/images/site-optimization",draft:!1,editUrl:"https://github.com/av1-community-contributors/av1-wiki.github.io/tree/main/docs/images/site-optimization.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{label:"Site Optimization",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"JPEG-XL",permalink:"/av1-wiki.github.io/docs/images/jxl"},next:{title:"SRT",permalink:"/av1-wiki.github.io/docs/subtitles/SRT"}},l={},p=[{value:"Fire &amp; Forget",id:"fire--forget",level:2},{value:"Massive Improvement",id:"massive-improvement",level:2},{value:"Lazy Loading",id:"lazy-loading",level:3},{value:"New Codecs",id:"new-codecs",level:2},{value:"Fallbacks",id:"fallbacks",level:3},{value:"Compression Efficacy",id:"compression-efficacy",level:3},{value:"Responsive Images",id:"responsive-images",level:2}],m={toc:p},c="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"site-optimization"},"Site Optimization"),(0,o.kt)("h1",{id:"reducing-image-load-on-the-web"},"Reducing Image Load on the Web"),(0,o.kt)("p",null,"A big part of understanding any multimedia codec technology is knowing the application for such technology. For images, a big use case is web delivery. Compared to other multimedia, images are incredibly popular on the Web & knowing how to serve them properly can be a massive boon to your website's traffic as well as less of a headache for users on slower connections or who are under bandwidth constraints. The most disappointing part is that images are often poorly done on the web; all too frequently will you run into a site serving massive photographic PNGs for no reason, or photography sites serving photographs fresh out of the editing software with no thought put into their final delivery. A little effort, patience, & knowledge will go a long way toward improving the user experience for individuals using your site, & this article will illustrate some of the basics."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"These instructions are for ",(0,o.kt)("em",{parentName:"p"},"photographic")," images; other kinds of images, like non-photographic, artwork, pixel art, etc. should likely be handled differently.")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Many images won't load properly unless your browser supports JXL, AVIF, & proper ICCv2 color management. This is for demonstration purposes only & won't represent an actual common website experience.")),(0,o.kt)("h2",{id:"fire--forget"},"Fire & Forget"),(0,o.kt)("p",null,"First, we'll illustrate what ",(0,o.kt)("em",{parentName:"p"},"not")," to do, which is fortunately not incredibly difficult to avoid. Taking an image straight out of your editing software at a massive size will often bloat the size & resolution to something that isn't generally usable for a website regardless of the codec you're using & its quality per bit. It can be argued there are specific use cases that demand incredible resolution & fidelity coexist on the Web, but we won't be covering those here. Here's an example of a bloated image:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"exported straight from Darktable at JPEG q90, no scaling")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"bloated_jpeg",src:i(3946).Z,width:"5470",height:"3656"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"2.2 MB")),(0,o.kt)("h2",{id:"massive-improvement"},"Massive Improvement"),(0,o.kt)("p",null,"The easiest way to have a large improvement without doing much work is to simply resize the image before serving it. Even if you exported a lossy JPEG, resizing should remove a lot of artifacts. The way to perceive a worst-case for an image's size on a site is to inspect the image element's width & height, which should give us an estimate for how large we should make our image. Any larger than this value is unreasonable since we're overfilling the element's size for no reason & the image is being scaled down anyway."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"box-size-mac",src:i(7414).Z}),"\n",(0,o.kt)("em",{parentName:"p"},"Inspect Element in Firefox. The Mac used to take this screenshot has a relatively high display resolution of 2560x1664. Because Macs scale things differently, we're probably going to want to double the horizontal resolution here.")),(0,o.kt)("p",null,"The width is the most important value here, so our new image is going to be exported with a width of 1699 pixels. This new image, encoded at JPEG q90 with ",(0,o.kt)("inlineCode",{parentName:"p"},"cjpegli"),", looks like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"smaller_jpeg",src:i(4018).Z,width:"1699",height:"1136"})),(0,o.kt)("p",null,"Obviously there's lost fidelity compared to the original, but considering this is ",(0,o.kt)("em",{parentName:"p"},"so much smaller"),", it is worth the trade-off for many. It is also worth noting we are using an improved jpeg encoder in the form of ",(0,o.kt)("inlineCode",{parentName:"p"},"cjpegli"),", although that is secondary to the resize. If it doesn't look as good as you want it to, you can always scale the resolution up a bit, though currently it looks plenty passable for its size."),(0,o.kt)("p",null,"2.2 MB -> ",(0,o.kt)("strong",{parentName:"p"},"233 kB")),(0,o.kt)("h3",{id:"lazy-loading"},"Lazy Loading"),(0,o.kt)("p",null,"A bonus tip is to add the ",(0,o.kt)("inlineCode",{parentName:"p"},'loading="lazy"')," attribute to your picture tag to allow the image to load only when scrolled to by a user. This doesn't save bandwidth, but it improves the user experience by loading images further down the page only when necessary. An example may look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<picture>\n    <img src="/images/jpeg_fallback.jpg" alt="alt text" width="XX" height="YY" loading="lazy" />\n</picture> \n')),(0,o.kt)("h2",{id:"new-codecs"},"New Codecs"),(0,o.kt)("p",null,"If you desire further improvement, it may be time to consider using a newer codec like ",(0,o.kt)("a",{parentName:"p",href:"/av1-wiki.github.io/docs/images/avif"},"AVIF")," or ",(0,o.kt)("a",{parentName:"p",href:"/av1-wiki.github.io/docs/images/jxl"},"JPEG-XL"),". These options will compress far more effectively than JPEG, with the only trade-off being browser support. We're not going to consider ",(0,o.kt)("a",{parentName:"p",href:"/av1-wiki.github.io/docs/images/webp"},"WebP")," or ",(0,o.kt)("a",{parentName:"p",href:"/av1-wiki.github.io/docs/images/heif"},"HEIC"),", since WebP is not competitive enough with JPEG for photographic imagery (often being worse) & HEIC has been superseded by AVIF - which sees greater support anyhow - & is not royalty free, effectively preventing widespread Web adoption forever. Again, we're just considering ",(0,o.kt)("em",{parentName:"p"},"lossy")," compression for ",(0,o.kt)("em",{parentName:"p"},"photographic")," images; it is a different story with WebP elsewhere, as it performs well on non-photographic content & is almost always better than PNG for 8-bit lossless compression. So, we are left with JXL & AVIF for now."),(0,o.kt)("h3",{id:"fallbacks"},"Fallbacks"),(0,o.kt)("p",null,"AVIF sees widespread support, but JPEG-XL isn't quite there yet with Web support as Google continues to push AVIF (it is debatable if it ever will be outside the Apple ecosystem). Even with AVIF, it may be worth providing a fallback. This can look like the following example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<picture>\n    <source srcset="/img/jxl_image.jxl" type="image/jxl" />\n    <source srcset="/img/avif_image.avif" type="image/avif" />\n    <source srcset="/img/webp_fback.webp" type="image/webp" />\n    <img src="/images/jpeg_fallback.jpg" alt="alt text" width="XX" height="YY" loading="lazy" />\n</picture> \n')),(0,o.kt)("p",null,"Here is a JXL falling back to an AVIF falling back to a WebP falling back to a JPEG. Pretty intense to have this many fallbacks unless you're really after the ultimate compression ratio, but it is certainly an option. AVIF & JPEG alone will probably be enough for most."),(0,o.kt)("h3",{id:"compression-efficacy"},"Compression Efficacy"),(0,o.kt)("p",null,"Let's look at how our image examples compare to the original with our new codec selection. We'll be aiming for high visual fidelity, so around the same quality as our initial JPEG encoded with ",(0,o.kt)("inlineCode",{parentName:"p"},"cjpegli")," (which scores ~",(0,o.kt)("inlineCode",{parentName:"p"},"83.01")," with the ",(0,o.kt)("a",{parentName:"p",href:"/av1-wiki.github.io/docs/metrics/ssimu2"},"SSIMULACRA2")," visual fidelity metric)."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"smaller_jxl",src:i(1969).Z})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"137.0 kB")," ",(0,o.kt)("em",{parentName:"p"},"JPEG-XL image, encoded with ",(0,o.kt)("inlineCode",{parentName:"em"},"cjxl lossless.png out.jxl -d 1.49 -e 9"),". Score: ~",(0,o.kt)("inlineCode",{parentName:"em"},"83.04"))," ",(0,o.kt)("em",{parentName:"p"},"3.06s user time")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"smaller_avif",src:i(4714).Z})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"124.8 kB")," ",(0,o.kt)("em",{parentName:"p"},"AVIF image, encoded with ",(0,o.kt)("inlineCode",{parentName:"em"},"avifenc -c aom -s 4 -j 8 -d 10 -y 444 --min 1 --max 63 -a end-usage=q -a cq-level=16 -a tune=ssim lossless.png out.avif"),". Score: ~",(0,o.kt)("inlineCode",{parentName:"em"},"83.03"))," ",(0,o.kt)("em",{parentName:"p"},"7.54s user time")),(0,o.kt)("p",null,"JXL also supports lossless transcoding of JPEG images. This means every pixel is identical, the image just has a smaller filesize than the original JPEG; if you are able to use JXL, you can transcode existing JPEGs losslessly on your site & save some bandwidth that way. The JPEG transcode below gives a higher SSIMULACRA2 score than the original for some reason, but I'll chalk that up to a decoding inconsistency between how the ",(0,o.kt)("inlineCode",{parentName:"p"},"ssimulacra2")," program decodes JPEG & JXL. Either way, the scores are fairly close."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"smaller_jxl_jpeg-recomp",src:i(4737).Z})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"189.4 kB")," ",(0,o.kt)("em",{parentName:"p"},"JPEG-XL image from JPEG, encoded with ",(0,o.kt)("inlineCode",{parentName:"em"},"cjxl input.jpg input-recomp.jxl -d 0.0 -e 9 --brotli_effort=11"),". Score: ~",(0,o.kt)("inlineCode",{parentName:"em"},"84.92")," (???)")," ",(0,o.kt)("em",{parentName:"p"},"0.67s user time")),(0,o.kt)("p",null,"The final trick we can use, while not a new codec at all, still increases quality per bit. Encoding an XYB JPEG with ",(0,o.kt)("inlineCode",{parentName:"p"},"cjpegli")," encodes with the perceptual XYB colorspace using an ICC profile to modify the original JPEG colors, avoiding JPEG's normal YCbCr which isn't perceptually optimized for the human visual system. Using XYB, we are able to afford identical quality with less bitrate than normal JPEG. This has universal compatibility, but not every application understands how to handle the XYB color profile (although color-managed modern browsers should be fine)."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"smaller_jpeg_xyb",src:i(2536).Z,width:"1699",height:"1136"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"208.3 kB")," ",(0,o.kt)("em",{parentName:"p"},"XYB JPEG, encoded with ",(0,o.kt)("inlineCode",{parentName:"em"},"cjpegli lossless.png out.jpg --xyb -d 1.155"),". Score: ~",(0,o.kt)("inlineCode",{parentName:"em"},"83.04"))," ",(0,o.kt)("em",{parentName:"p"},"0.10s user time")),(0,o.kt)("p",null,"In this particular instance, AVIF seems to be the overall winner. This isn't always the case due to JXL's superiority at higher fidelity & with more detailed images, but according to SSIMULACRA2, AVIF has the best quality per bit with this image. You can use your own eyes to further clarify your choice, though. It is worth mentionining that as these were encoded from a 16-bit source PNG, the JXL image is the only one that maintains the full original bit depth, & AVIF isn't fast to encode."),(0,o.kt)("h2",{id:"responsive-images"},"Responsive Images"),(0,o.kt)("p",null,"Displaying an image that is too large for a viewport is a waste of bandwidth, & displaying an image that's too small for the viewport leaves fidelity to be desired. Luckily, we have the ",(0,o.kt)("a",{parentName:"p",href:"https://ausi.github.io/respimagelint/"},"Responsive Image Linter")," that can help us figure out which image sizes we should be using."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"responsive_image_linter",src:i(2207).Z})),(0,o.kt)("p",null,"In our fire & forget example, we see that we are serving an image that is far too large. We already know that, but now we can see that given various viewport sizes we could be serving images that have respective widths of 270px, 958px, 1350px, 1660px, & 1916px to optimize for delivery to a variety of different devices. Here's how we'd write that in HTML:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<picture>\n\u2003\u2003<source type="image/jxl" srcset="/img_270.jxl 270w, /img_958.jxl 958w, /img_1350.jxl 1350w, /img_1660.jxl 1660w, /img_1916.jxl 1916w" sizes="(min-width: 2000px) 1916px, (min-width: 1700px) 1660px, (min-width: 1400px) 1350px, (min-width: 1000px) 958px, calc(100vw - 24px)" />\n\u2003\u2003<source type="image/avif" srcset="/img_270.avif 270w, /img_958.avif 958w, /img_1350.avif 1350w, /img_1660.avif 1660w, /img_1916.avif 1916w" sizes="(min-width: 2000px) 1916px, (min-width: 1700px) 1660px, (min-width: 1400px) 1350px, (min-width: 1000px) 958px, calc(100vw - 24px)" />\n\u2003\u2003<img width="1699" height="1136" alt="alt text" srcset="/img_270.jpg 270w, /img_958.jpg 958w, /img_1350.jpg 1350w, /img_1660.jpg 1660w, /img_1916.jpg 1916w" sizes="(min-width: 2000px) 1916px, (min-width: 1700px) 1660px, (min-width: 1400px) 1350px, (min-width: 1000px) 958px, calc(100vw - 24px)" src="/fallback.jpg" />\n</picture>\n')),(0,o.kt)("picture",null,"\u2003\u2003",(0,o.kt)("source",{type:"image/jxl",srcset:"https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_270.jxl 270w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_958.jxl 958w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_1350.jxl 1350w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_1660.jxl 1660w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_1916.jxl 1916w",sizes:"(min-width: 2000px) 1916px, (min-width: 1700px) 1660px, (min-width: 1400px) 1350px, (min-width: 1000px) 958px, calc(100vw - 24px)"}),"\u2003\u2003",(0,o.kt)("source",{type:"image/avif",srcset:"https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_270.avif 270w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_958.avif 958w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_1350.avif 1350w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_1660.avif 1660w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_1916.avif 1916w",sizes:"(min-width: 2000px) 1916px, (min-width: 1700px) 1660px, (min-width: 1400px) 1350px, (min-width: 1000px) 958px, calc(100vw - 24px)"}),"\u2003\u2003",(0,o.kt)("img",{loading:"lazy",width:"1699",height:"1136",alt:"alt text",srcset:"https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_270.jpg 270w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_958.jpg 958w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_1350.jpg 1350w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_1660.jpg 1660w, https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/img_size/img_1916.jpg 1916w",sizes:"(min-width: 2000px) 1916px, (min-width: 1700px) 1660px, (min-width: 1400px) 1350px, (min-width: 1000px) 958px, calc(100vw - 24px)",src:"https://raw.githubusercontent.com/av1-community-contributors/av1-wiki.github.io/deployment/img/_DSC8466-smaller.jpg"})),(0,o.kt)("p",null,"That's all! Massive thanks to Auto-Rez Media Technologies for the inspiration behind this article & explicit permission to use their ",(0,o.kt)("a",{parentName:"p",href:"https://autocompressor.net/blog/reduce-image-load"},"Reduce Your Page's Image Load")," blog post when writing this entry. I have ",(0,o.kt)("a",{parentName:"p",href:"https://cdn.discordapp.com/attachments/870877058283233312/1129578082077003836/root_written_perm.png"},"confirmed")," with their leadership that this wiki entry can be safely licensed under CC BY-SA 4.0."))}h.isMDXComponent=!0},4737:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/_DSC8466-smaller-recomp-f3af6d54a8c1c62cda0c2d3ba048e1fc.jxl"},2536:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/_DSC8466-smaller-xyb-0372077e225cf7b460ec9238bb2a65f9.jpg"},4714:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/_DSC8466-smaller-452ed8f5a33da727be398450e7e580a3.avif"},4018:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/_DSC8466-smaller-48eaf650a417558ea976bf40eee82f67.jpg"},1969:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/_DSC8466-smaller-492a0639fb771671738062a57b2015a2.jxl"},3946:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/_DSC8466-d51a7e87bed86d101412ba728ebc6be2.jpg"},7414:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/box-size-mac-f49e702b0cb4a531f65283ad604d4b4c.avif"},2207:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/responsive_image_linter-178eb56c12557c53a2b129dd75925fe9.avif"}}]);